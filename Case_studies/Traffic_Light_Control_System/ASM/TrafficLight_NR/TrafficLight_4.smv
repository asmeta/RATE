--file ..\Case_studies\Traffic_Light_Control_System\ASM\TrafficLight_NR\TrafficLight_4.smv
-- options: flatten? false
MODULE main
	VAR
		lightsA: {ALL_OFF, BLINK_YELLOW, GREEN, LIGHTS_UNDEF, RED, YELLOW}; --controlled
		lightsB: {ALL_OFF, BLINK_YELLOW, GREEN, LIGHTS_UNDEF, RED, YELLOW}; --controlled
		statusA: {ATTENTION, BLOCKED, LIGHTSTATUS_UNDEF, OFF, PREPARE_BLOCK, RELEASED}; --controlled
		statusB: {ATTENTION, BLOCKED, LIGHTSTATUS_UNDEF, OFF, PREPARE_BLOCK, RELEASED}; --controlled
		statusC: {CONTROLLERSTATUS_UNDEF, CONTR_OFF, OPERATE, STANDBY}; --controlled
		statusCOperate: {BLOCKED_A, BLOCKED_B, CONTROLLERSUBSTATUSOPERATE_UNDEF, RELEASED_A, RELEASED_B, RELEASE_A, RELEASE_B}; --controlled
		transitionA: {PREPARE_PERIOD, RELEASE_PERIOD}; --monitored
		transitionB: {PREPARE_PERIOD, RELEASE_PERIOD}; --monitored
		transitionC: {OPERATE_T, SAFE_PERIOD, STANDBY_T, TURN_OFF, TURN_ON}; --monitored
	CONSTANTS CONTROLLERTRANSITION_UNDEF, OPERATE_T, SAFE_PERIOD, STANDBY_T, TURN_OFF, TURN_ON, LIGHTTRANSITION_UNDEF, PREPARE_PERIOD, RELEASE_PERIOD, LIGHTS_UNDEF, ALL_OFF, BLINK_YELLOW, GREEN, RED, YELLOW, CONTROLLERSTATUS_UNDEF, CONTR_OFF, OPERATE, STANDBY, CONTROLLERSUBSTATUSOPERATE_UNDEF, BLOCKED_A, BLOCKED_B, RELEASED_A, RELEASED_B, RELEASE_A, RELEASE_B, LIGHTSTATUS_UNDEF, ATTENTION, BLOCKED, OFF, PREPARE_BLOCK, RELEASED;
	ASSIGN
		init(lightsA) := ALL_OFF;
		init(lightsB) := ALL_OFF;
		init(statusA) := OFF;
		init(statusB) := OFF;
		init(statusC) := CONTR_OFF;
		init(statusCOperate) := BLOCKED_A;
		next(lightsA) :=
			case
				((transitionA = RELEASE_PERIOD) & ((transitionC != STANDBY_T) & (statusA = RELEASED))): YELLOW;
				(((statusCOperate = BLOCKED_A) & (transitionC = SAFE_PERIOD)) & ((transitionC != STANDBY_T) & (statusC = OPERATE)) & (statusA = BLOCKED)): GREEN;
				((((transitionC = OPERATE_T) & (statusC = STANDBY)) & (statusA = ATTENTION)) | ((transitionA = PREPARE_PERIOD) & ((statusA = PREPARE_BLOCK) & (transitionC != STANDBY_T)))): RED;
				(((((statusC = CONTR_OFF) & (transitionC = TURN_ON)) & (statusA = OFF)) | ((((statusA = RELEASED) | (statusA = BLOCKED)) | (statusA = PREPARE_BLOCK)) & ((statusC = CONTR_OFF) & (transitionC = TURN_ON)))) | (((statusC = OPERATE) & (transitionC = STANDBY_T)) & (((statusA = RELEASED) | (statusA = BLOCKED)) | (statusA = PREPARE_BLOCK)))): BLINK_YELLOW;
				(((statusA = PREPARE_BLOCK) | ((statusA = RELEASED) | ((statusA = BLOCKED) | (statusA = ATTENTION)))) & ((transitionC = TURN_OFF) & (statusC = STANDBY))): ALL_OFF;
				TRUE: lightsA;
			esac;
		next(lightsB) :=
			case
				(((transitionB = PREPARE_PERIOD) & ((transitionC != STANDBY_T) & (statusB = PREPARE_BLOCK))) | (((transitionC = OPERATE_T) & (statusC = STANDBY)) & (statusB = ATTENTION))): RED;
				((transitionB = RELEASE_PERIOD) & ((transitionC != STANDBY_T) & (statusB = RELEASED))): YELLOW;
				(((transitionC != STANDBY_T) & (statusC = OPERATE)) & ((statusCOperate = BLOCKED_B) & (transitionC = SAFE_PERIOD)) & (statusB = BLOCKED)): GREEN;
				((((statusC = OPERATE) & (transitionC = STANDBY_T)) & (((statusB = RELEASED) | (statusB = BLOCKED)) | (statusB = PREPARE_BLOCK))) | ((((statusC = CONTR_OFF) & (transitionC = TURN_ON)) & (statusB = OFF)) | ((((statusB = RELEASED) | (statusB = BLOCKED)) | (statusB = PREPARE_BLOCK)) & ((statusC = CONTR_OFF) & (transitionC = TURN_ON))))): BLINK_YELLOW;
				(((((statusB = BLOCKED) | (statusB = ATTENTION)) | (statusB = RELEASED)) | (statusB = PREPARE_BLOCK)) & ((transitionC = TURN_OFF) & (statusC = STANDBY))): ALL_OFF;
				TRUE: lightsB;
			esac;
		next(statusA) :=
			case
				((transitionA = RELEASE_PERIOD) & ((transitionC != STANDBY_T) & (statusA = RELEASED))): PREPARE_BLOCK;
				(((statusCOperate = BLOCKED_A) & (transitionC = SAFE_PERIOD)) & ((transitionC != STANDBY_T) & (statusC = OPERATE)) & (statusA = BLOCKED)): RELEASED;
				(((((statusC = CONTR_OFF) & (transitionC = TURN_ON)) & (statusA = OFF)) | ((((statusA = RELEASED) | (statusA = BLOCKED)) | (statusA = PREPARE_BLOCK)) & ((statusC = CONTR_OFF) & (transitionC = TURN_ON)))) | (((statusC = OPERATE) & (transitionC = STANDBY_T)) & (((statusA = RELEASED) | (statusA = BLOCKED)) | (statusA = PREPARE_BLOCK)))): ATTENTION;
				((((transitionC = OPERATE_T) & (statusC = STANDBY)) & (statusA = ATTENTION)) | ((transitionA = PREPARE_PERIOD) & ((statusA = PREPARE_BLOCK) & (transitionC != STANDBY_T)))): BLOCKED;
				(((statusA = PREPARE_BLOCK) | ((statusA = RELEASED) | ((statusA = BLOCKED) | (statusA = ATTENTION)))) & ((transitionC = TURN_OFF) & (statusC = STANDBY))): OFF;
				TRUE: statusA;
			esac;
		next(statusB) :=
			case
				(((transitionB = PREPARE_PERIOD) & ((transitionC != STANDBY_T) & (statusB = PREPARE_BLOCK))) | (((transitionC = OPERATE_T) & (statusC = STANDBY)) & (statusB = ATTENTION))): BLOCKED;
				((transitionB = RELEASE_PERIOD) & ((transitionC != STANDBY_T) & (statusB = RELEASED))): PREPARE_BLOCK;
				(((transitionC != STANDBY_T) & (statusC = OPERATE)) & ((statusCOperate = BLOCKED_B) & (transitionC = SAFE_PERIOD)) & (statusB = BLOCKED)): RELEASED;
				((((statusC = OPERATE) & (transitionC = STANDBY_T)) & (((statusB = RELEASED) | (statusB = BLOCKED)) | (statusB = PREPARE_BLOCK))) | ((((statusC = CONTR_OFF) & (transitionC = TURN_ON)) & (statusB = OFF)) | ((((statusB = RELEASED) | (statusB = BLOCKED)) | (statusB = PREPARE_BLOCK)) & ((statusC = CONTR_OFF) & (transitionC = TURN_ON))))): ATTENTION;
				(((((statusB = BLOCKED) | (statusB = ATTENTION)) | (statusB = RELEASED)) | (statusB = PREPARE_BLOCK)) & ((transitionC = TURN_OFF) & (statusC = STANDBY))): OFF;
				TRUE: statusB;
			esac;
		next(statusC) :=
			case
				((transitionC = OPERATE_T) & (statusC = STANDBY)): OPERATE;
				(((statusC = OPERATE) & (transitionC = STANDBY_T)) | ((statusC = CONTR_OFF) & (transitionC = TURN_ON))): STANDBY;
				((transitionC = TURN_OFF) & (statusC = STANDBY)): CONTR_OFF;
				TRUE: statusC;
			esac;
		next(statusCOperate) :=
			case
				((((transitionC = OPERATE_T) & (statusC = STANDBY)) & ((statusC = OPERATE) & (statusCOperate = RELEASED_B)) & (statusB = ATTENTION)) | ((((((statusC = OPERATE) & (statusCOperate = RELEASED_B)) & ((transitionA = PREPARE_PERIOD) & ((statusA = PREPARE_BLOCK) & (transitionC != STANDBY_T)))) | (((transitionB = PREPARE_PERIOD) & ((transitionC != STANDBY_T) & (statusB = PREPARE_BLOCK))) & ((statusC = OPERATE) & (statusCOperate = RELEASED_B)))) | ((transitionC = OPERATE_T) & (statusC = STANDBY))) | (((transitionC = OPERATE_T) & (statusC = STANDBY)) & ((statusC = OPERATE) & (statusCOperate = RELEASED_B)) & (statusA = ATTENTION)))): BLOCKED_A;
				((((transitionB = RELEASE_PERIOD) & ((transitionC != STANDBY_T) & (statusB = RELEASED))) & ((statusC = OPERATE) & (statusCOperate = RELEASE_A))) | (((transitionA = RELEASE_PERIOD) & ((transitionC != STANDBY_T) & (statusA = RELEASED))) & ((statusC = OPERATE) & (statusCOperate = RELEASE_A)))): RELEASED_A;
				(((statusCOperate = BLOCKED_A) & (transitionC = SAFE_PERIOD)) & ((transitionC != STANDBY_T) & (statusC = OPERATE))): RELEASE_A;
				(((transitionC != STANDBY_T) & (statusC = OPERATE)) & ((statusCOperate = BLOCKED_B) & (transitionC = SAFE_PERIOD))): RELEASE_B;
				((((transitionB = RELEASE_PERIOD) & ((transitionC != STANDBY_T) & (statusB = RELEASED))) & ((statusC = OPERATE) & (statusCOperate = RELEASE_B))) | (((transitionA = RELEASE_PERIOD) & ((transitionC != STANDBY_T) & (statusA = RELEASED))) & ((statusC = OPERATE) & (statusCOperate = RELEASE_B)))): RELEASED_B;
				((((((transitionB = PREPARE_PERIOD) & ((transitionC != STANDBY_T) & (statusB = PREPARE_BLOCK))) & ((statusC = OPERATE) & (statusCOperate = RELEASED_A))) | (((statusC = OPERATE) & (statusCOperate = RELEASED_A)) & ((transitionA = PREPARE_PERIOD) & ((statusA = PREPARE_BLOCK) & (transitionC != STANDBY_T))))) | (((statusC = OPERATE) & (statusCOperate = RELEASED_A)) & ((transitionC = OPERATE_T) & (statusC = STANDBY)) & (statusA = ATTENTION))) | (((statusC = OPERATE) & (statusCOperate = RELEASED_A)) & ((transitionC = OPERATE_T) & (statusC = STANDBY)) & (statusB = ATTENTION))): BLOCKED_B;
				TRUE: statusCOperate;
			esac;
--LTL properties
LTLSPEC NAME ltl0 := G(!((((transitionC = TURN_ON) & (transitionB = RELEASE_PERIOD)) & (transitionA = RELEASE_PERIOD)) & X(TRUE)));

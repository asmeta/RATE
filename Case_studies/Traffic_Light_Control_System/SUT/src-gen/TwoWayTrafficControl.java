/** Generated by YAKINDU Statechart Tools code generator. */

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observer;

public class TwoWayTrafficControl implements IStatemachine, ITimed, ICycleBased {
	private static class EvBuf {
		private boolean on;
		private boolean off;
		private boolean operate;
		private boolean standby;
	}
	private static class TimeEventsEvBuf {
		private boolean twoWayTrafficControl_main_Operate_r_all_blocked_before_B_time_event_0;
		private boolean twoWayTrafficControl_main_Operate_r_all_blocked_before_A_time_event_0;
	}
	private static class ShadowEvBuf {
		private boolean trafficLightB_released;
		private boolean trafficLightB_blocked;
		private boolean trafficLightA_released;
		private boolean trafficLightA_blocked;
	}
	private static class TwoWayTrafficControlEvBuf {
		private EvBuf iface = new EvBuf();
		private TimeEventsEvBuf timeEvents = new TimeEventsEvBuf();
		private ShadowEvBuf shadow = new ShadowEvBuf();
	}
	public enum State {
		MAIN_OFF,
		MAIN_STANDBY,
		MAIN_OPERATE,
		MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_B,
		MAIN_OPERATE_R_RELEASE_B,
		MAIN_OPERATE_R_B_RELEASED,
		MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_A,
		MAIN_OPERATE_R_RELEASE_A,
		MAIN_OPERATE_R_A_RELEASED,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private boolean trafficLightB_released;
	private boolean trafficLightB_blocked;
	private boolean trafficLightA_released;
	private boolean trafficLightA_blocked;
	private TwoWayTrafficControlEvBuf current = new TwoWayTrafficControlEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public TwoWayTrafficControl() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setTrafficLightA(null);
		
		setTrafficLightB(null);
		
		setSafePeriod(10l);
		
		isExecuting = false;
	}
	
	public void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		swapInEvents();
		
		microStep();
		
		isExecuting = false;
	}
	
	public void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		current.iface.on = on;
		on = false;
		
		current.iface.off = off;
		off = false;
		
		current.iface.operate = operate;
		operate = false;
		
		current.iface.standby = standby;
		standby = false;
		
		current.timeEvents.twoWayTrafficControl_main_Operate_r_all_blocked_before_B_time_event_0 = timeEvents[0];
		timeEvents[0] = false;
		
		current.timeEvents.twoWayTrafficControl_main_Operate_r_all_blocked_before_A_time_event_0 = timeEvents[1];
		timeEvents[1] = false;
		
		current.shadow.trafficLightB_released = trafficLightB_released;
		trafficLightB_released = false;
		
		current.shadow.trafficLightB_blocked = trafficLightB_blocked;
		trafficLightB_blocked = false;
		
		current.shadow.trafficLightA_released = trafficLightA_released;
		trafficLightA_released = false;
		
		current.shadow.trafficLightA_blocked = trafficLightA_blocked;
		trafficLightA_blocked = false;
	}
	
	private void clearInEvents() {
		on = false;
		off = false;
		operate = false;
		standby = false;
		trafficLightB_released = false;
		trafficLightB_blocked = false;
		trafficLightA_released = false;
		trafficLightA_blocked = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_OFF:
			main_Off_react(-1l);
			break;
		case MAIN_STANDBY:
			main_Standby_react(-1l);
			break;
		case MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_B:
			main_Operate_r_all_blocked_before_B_react(-1l);
			break;
		case MAIN_OPERATE_R_RELEASE_B:
			main_Operate_r_Release_B_react(-1l);
			break;
		case MAIN_OPERATE_R_B_RELEASED:
			main_Operate_r_B_Released_react(-1l);
			break;
		case MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_A:
			main_Operate_r_all_blocked_before_A_react(-1l);
			break;
		case MAIN_OPERATE_R_RELEASE_A:
			main_Operate_r_Release_A_react(-1l);
			break;
		case MAIN_OPERATE_R_A_RELEASED:
			main_Operate_r_A_Released_react(-1l);
			break;
		default:
			break;
		}
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_OFF:
			return stateVector[0] == State.MAIN_OFF;
		case MAIN_STANDBY:
			return stateVector[0] == State.MAIN_STANDBY;
		case MAIN_OPERATE:
			return stateVector[0].ordinal() >= State.
					MAIN_OPERATE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_OPERATE_R_A_RELEASED.ordinal();
		case MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_B:
			return stateVector[0] == State.MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_B;
		case MAIN_OPERATE_R_RELEASE_B:
			return stateVector[0] == State.MAIN_OPERATE_R_RELEASE_B;
		case MAIN_OPERATE_R_B_RELEASED:
			return stateVector[0] == State.MAIN_OPERATE_R_B_RELEASED;
		case MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_A:
			return stateVector[0] == State.MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_A;
		case MAIN_OPERATE_R_RELEASE_A:
			return stateVector[0] == State.MAIN_OPERATE_R_RELEASE_A;
		case MAIN_OPERATE_R_A_RELEASED:
			return stateVector[0] == State.MAIN_OPERATE_R_A_RELEASED;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		timeEvents[eventID] = true;
	}
	
	
	protected void raiseTrafficLightB_released() {
		trafficLightB_released = true;
	}
	
	protected void raiseTrafficLightB_blocked() {
		trafficLightB_blocked = true;
	}
	
	protected void raiseTrafficLightA_released() {
		trafficLightA_released = true;
	}
	
	protected void raiseTrafficLightA_blocked() {
		trafficLightA_blocked = true;
	}
	
	private boolean on;
	
	
	public void raiseOn() {
		on = true;
	}
	
	private boolean off;
	
	
	public void raiseOff() {
		off = true;
	}
	
	private boolean operate;
	
	
	public void raiseOperate() {
		operate = true;
	}
	
	private boolean standby;
	
	
	public void raiseStandby() {
		standby = true;
	}
	
	private TrafficLight trafficLightA;
	
	private Observer<Void> trafficLightA_released_observer = new Observer<Void>() {
		@Override
		public void next(Void value) {
			raiseTrafficLightA_released();
		}
	};
	
	private Observer<Void> trafficLightA_blocked_observer = new Observer<Void>() {
		@Override
		public void next(Void value) {
			raiseTrafficLightA_blocked();
		}
	};
	
	
	public TrafficLight getTrafficLightA() {
		return trafficLightA;
	}
	
	public void setTrafficLightA(TrafficLight value) {
		if (this.trafficLightA != null) {
			this.trafficLightA.getReleased().unsubscribe(trafficLightA_released_observer);
			this.trafficLightA.getBlocked().unsubscribe(trafficLightA_blocked_observer);
		}
		
		this.trafficLightA = value;
		
		if (this.trafficLightA != null) {
			this.trafficLightA.getReleased().subscribe(trafficLightA_released_observer);
			this.trafficLightA.getBlocked().subscribe(trafficLightA_blocked_observer);
		}
	}
	
	private TrafficLight trafficLightB;
	
	private Observer<Void> trafficLightB_released_observer = new Observer<Void>() {
		@Override
		public void next(Void value) {
			raiseTrafficLightB_released();
		}
	};
	
	private Observer<Void> trafficLightB_blocked_observer = new Observer<Void>() {
		@Override
		public void next(Void value) {
			raiseTrafficLightB_blocked();
		}
	};
	
	
	public TrafficLight getTrafficLightB() {
		return trafficLightB;
	}
	
	public void setTrafficLightB(TrafficLight value) {
		if (this.trafficLightB != null) {
			this.trafficLightB.getReleased().unsubscribe(trafficLightB_released_observer);
			this.trafficLightB.getBlocked().unsubscribe(trafficLightB_blocked_observer);
		}
		
		this.trafficLightB = value;
		
		if (this.trafficLightB != null) {
			this.trafficLightB.getReleased().subscribe(trafficLightB_released_observer);
			this.trafficLightB.getBlocked().subscribe(trafficLightB_blocked_observer);
		}
	}
	
	private long safePeriod;
	
	public long getSafePeriod() {
		return safePeriod;
	}
	
	public void setSafePeriod(long value) {
		this.safePeriod = value;
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction_main_Off() {
		getTrafficLightA().raiseSwitchOff();
		
		getTrafficLightB().raiseSwitchOff();
	}
	
	/* Entry action for state 'Standby'. */
	private void entryAction_main_Standby() {
		getTrafficLightA().raiseAttention();
		
		getTrafficLightB().raiseAttention();
	}
	
	/* Entry action for state 'all blocked before B'. */
	private void entryAction_main_Operate_r_all_blocked_before_B() {
		timerService.setTimer(this, 0, (getSafePeriod() * 1000l), false);
		
		getTrafficLightA().raiseBlock();
		
		getTrafficLightB().raiseBlock();
	}
	
	/* Entry action for state 'Release B'. */
	private void entryAction_main_Operate_r_Release_B() {
		getTrafficLightB().raiseRelease();
	}
	
	/* Entry action for state 'all blocked before A'. */
	private void entryAction_main_Operate_r_all_blocked_before_A() {
		timerService.setTimer(this, 1, (getSafePeriod() * 1000l), false);
		
		getTrafficLightA().raiseBlock();
		
		getTrafficLightB().raiseBlock();
	}
	
	/* Entry action for state 'Release A'. */
	private void entryAction_main_Operate_r_Release_A() {
		getTrafficLightA().raiseRelease();
	}
	
	/* Exit action for state 'Off'. */
	private void exitAction_main_Off() {
		getTrafficLightA().raiseSwitchOn();
		
		getTrafficLightB().raiseSwitchOn();
	}
	
	/* Exit action for state 'all blocked before B'. */
	private void exitAction_main_Operate_r_all_blocked_before_B() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'all blocked before A'. */
	private void exitAction_main_Operate_r_all_blocked_before_A() {
		timerService.unsetTimer(this, 1);
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_main_Off_default() {
		entryAction_main_Off();
		stateVector[0] = State.MAIN_OFF;
	}
	
	/* 'default' enter sequence for state Standby */
	private void enterSequence_main_Standby_default() {
		entryAction_main_Standby();
		stateVector[0] = State.MAIN_STANDBY;
	}
	
	/* 'default' enter sequence for state Operate */
	private void enterSequence_main_Operate_default() {
		enterSequence_main_Operate_r_default();
	}
	
	/* 'default' enter sequence for state all blocked before B */
	private void enterSequence_main_Operate_r_all_blocked_before_B_default() {
		entryAction_main_Operate_r_all_blocked_before_B();
		stateVector[0] = State.MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_B;
	}
	
	/* 'default' enter sequence for state Release B */
	private void enterSequence_main_Operate_r_Release_B_default() {
		entryAction_main_Operate_r_Release_B();
		stateVector[0] = State.MAIN_OPERATE_R_RELEASE_B;
	}
	
	/* 'default' enter sequence for state B Released */
	private void enterSequence_main_Operate_r_B_Released_default() {
		stateVector[0] = State.MAIN_OPERATE_R_B_RELEASED;
	}
	
	/* 'default' enter sequence for state all blocked before A */
	private void enterSequence_main_Operate_r_all_blocked_before_A_default() {
		entryAction_main_Operate_r_all_blocked_before_A();
		stateVector[0] = State.MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_A;
	}
	
	/* 'default' enter sequence for state Release A */
	private void enterSequence_main_Operate_r_Release_A_default() {
		entryAction_main_Operate_r_Release_A();
		stateVector[0] = State.MAIN_OPERATE_R_RELEASE_A;
	}
	
	/* 'default' enter sequence for state A Released */
	private void enterSequence_main_Operate_r_A_Released_default() {
		stateVector[0] = State.MAIN_OPERATE_R_A_RELEASED;
	}
	
	/* 'default' enter sequence for region main */
	private void enterSequence_main_default() {
		react_main__entry_Default();
	}
	
	/* 'default' enter sequence for region r */
	private void enterSequence_main_Operate_r_default() {
		react_main_Operate_r__entry_Default();
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_main_Off() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_Off();
	}
	
	/* Default exit sequence for state Standby */
	private void exitSequence_main_Standby() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Operate */
	private void exitSequence_main_Operate() {
		exitSequence_main_Operate_r();
	}
	
	/* Default exit sequence for state all blocked before B */
	private void exitSequence_main_Operate_r_all_blocked_before_B() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_Operate_r_all_blocked_before_B();
	}
	
	/* Default exit sequence for state Release B */
	private void exitSequence_main_Operate_r_Release_B() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state B Released */
	private void exitSequence_main_Operate_r_B_Released() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state all blocked before A */
	private void exitSequence_main_Operate_r_all_blocked_before_A() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_Operate_r_all_blocked_before_A();
	}
	
	/* Default exit sequence for state Release A */
	private void exitSequence_main_Operate_r_Release_A() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state A Released */
	private void exitSequence_main_Operate_r_A_Released() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main */
	private void exitSequence_main() {
		switch (stateVector[0]) {
		case MAIN_OFF:
			exitSequence_main_Off();
			break;
		case MAIN_STANDBY:
			exitSequence_main_Standby();
			break;
		case MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_B:
			exitSequence_main_Operate_r_all_blocked_before_B();
			break;
		case MAIN_OPERATE_R_RELEASE_B:
			exitSequence_main_Operate_r_Release_B();
			break;
		case MAIN_OPERATE_R_B_RELEASED:
			exitSequence_main_Operate_r_B_Released();
			break;
		case MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_A:
			exitSequence_main_Operate_r_all_blocked_before_A();
			break;
		case MAIN_OPERATE_R_RELEASE_A:
			exitSequence_main_Operate_r_Release_A();
			break;
		case MAIN_OPERATE_R_A_RELEASED:
			exitSequence_main_Operate_r_A_Released();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r */
	private void exitSequence_main_Operate_r() {
		switch (stateVector[0]) {
		case MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_B:
			exitSequence_main_Operate_r_all_blocked_before_B();
			break;
		case MAIN_OPERATE_R_RELEASE_B:
			exitSequence_main_Operate_r_Release_B();
			break;
		case MAIN_OPERATE_R_B_RELEASED:
			exitSequence_main_Operate_r_B_Released();
			break;
		case MAIN_OPERATE_R_ALL_BLOCKED_BEFORE_A:
			exitSequence_main_Operate_r_all_blocked_before_A();
			break;
		case MAIN_OPERATE_R_RELEASE_A:
			exitSequence_main_Operate_r_Release_A();
			break;
		case MAIN_OPERATE_R_A_RELEASED:
			exitSequence_main_Operate_r_A_Released();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main__entry_Default() {
		enterSequence_main_Off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_Operate_r__entry_Default() {
		enterSequence_main_Operate_r_all_blocked_before_A_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_Off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (current.iface.on) {
				exitSequence_main_Off();
				enterSequence_main_Standby_default();
				react(0l);
				
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Standby_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (current.iface.off) {
				exitSequence_main_Standby();
				enterSequence_main_Off_default();
				react(0l);
				
				transitioned_after = 0l;
			} else {
				if (current.iface.operate) {
					exitSequence_main_Standby();
					enterSequence_main_Operate_default();
					react(0l);
					
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Operate_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (current.iface.standby) {
				exitSequence_main_Operate();
				enterSequence_main_Standby_default();
				react(0l);
				
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Operate_r_all_blocked_before_B_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (current.timeEvents.twoWayTrafficControl_main_Operate_r_all_blocked_before_B_time_event_0) {
				exitSequence_main_Operate_r_all_blocked_before_B();
				current.timeEvents.twoWayTrafficControl_main_Operate_r_all_blocked_before_B_time_event_0 = false;
				enterSequence_main_Operate_r_Release_B_default();
				main_Operate_react(0l);
				
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_Operate_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Operate_r_Release_B_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (current.shadow.trafficLightB_released) {
				exitSequence_main_Operate_r_Release_B();
				enterSequence_main_Operate_r_B_Released_default();
				main_Operate_react(0l);
				
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_Operate_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Operate_r_B_Released_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (current.shadow.trafficLightB_blocked) {
				exitSequence_main_Operate_r_B_Released();
				enterSequence_main_Operate_r_all_blocked_before_A_default();
				main_Operate_react(0l);
				
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_Operate_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Operate_r_all_blocked_before_A_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (current.timeEvents.twoWayTrafficControl_main_Operate_r_all_blocked_before_A_time_event_0) {
				exitSequence_main_Operate_r_all_blocked_before_A();
				current.timeEvents.twoWayTrafficControl_main_Operate_r_all_blocked_before_A_time_event_0 = false;
				enterSequence_main_Operate_r_Release_A_default();
				main_Operate_react(0l);
				
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_Operate_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Operate_r_Release_A_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (current.shadow.trafficLightA_released) {
				exitSequence_main_Operate_r_Release_A();
				enterSequence_main_Operate_r_A_Released_default();
				main_Operate_react(0l);
				
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_Operate_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Operate_r_A_Released_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (current.shadow.trafficLightA_blocked) {
				exitSequence_main_Operate_r_A_Released();
				enterSequence_main_Operate_r_all_blocked_before_B_default();
				main_Operate_react(0l);
				
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_Operate_react(transitioned_before);
		}
		return transitioned_after;
	}
	
}

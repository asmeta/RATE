--file D:\AgHome\progettidaSVNGIT\RATE\Traffic_Light_Control_System\ASM\TrafficLight4\TrafficLight_4.smv
-- options: flatten? true
MODULE main
	VAR
		lightsA: {ALL_OFF, BLINK_YELLOW, GREEN, LIGHTS_UNDEF, RED, YELLOW}; --controlled
		lightsB: {ALL_OFF, BLINK_YELLOW, GREEN, LIGHTS_UNDEF, RED, YELLOW}; --controlled
		statusA: {ATTENTION, BLOCKED, LIGHTSTATUS_UNDEF, OFF, PREPARE_BLOCK, RELEASED}; --controlled
		statusB: {ATTENTION, BLOCKED, LIGHTSTATUS_UNDEF, OFF, PREPARE_BLOCK, RELEASED}; --controlled
		statusC: {CONTROLLERSTATUS_UNDEF, CONTR_OFF, OPERATE, STANDBY}; --controlled
		statusCOperate: {BLOCKED_A, BLOCKED_B, CONTROLLERSUBSTATUSOPERATE_UNDEF, RELEASED_A, RELEASED_B, RELEASE_A, RELEASE_B}; --controlled
		transitionA: {PREPARE_PERIOD, RELEASE_PERIOD}; --monitored
		transitionB: {PREPARE_PERIOD, RELEASE_PERIOD}; --monitored
		transitionC: {OPERATE_T, SAFE_PERIOD, STANDBY_T, TURN_OFF, TURN_ON}; --monitored
	CONSTANTS CONTROLLERSUBSTATUSOPERATE_UNDEF, BLOCKED_A, BLOCKED_B, RELEASED_A, RELEASED_B, RELEASE_A, RELEASE_B, CONTROLLERTRANSITION_UNDEF, OPERATE_T, SAFE_PERIOD, STANDBY_T, TURN_OFF, TURN_ON, LIGHTTRANSITION_UNDEF, PREPARE_PERIOD, RELEASE_PERIOD, LIGHTSTATUS_UNDEF, ATTENTION, BLOCKED, OFF, PREPARE_BLOCK, RELEASED, LIGHTS_UNDEF, ALL_OFF, BLINK_YELLOW, GREEN, RED, YELLOW, CONTROLLERSTATUS_UNDEF, CONTR_OFF, OPERATE, STANDBY;
	ASSIGN
		init(lightsA) := ALL_OFF;
		init(lightsB) := ALL_OFF;
		init(statusA) := OFF;
		init(statusB) := OFF;
		init(statusC) := CONTR_OFF;
		init(statusCOperate) := BLOCKED_A;
		next(lightsA) :=
			case
				(((transitionC = OPERATE_T) & (statusC = STANDBY)) | (((statusCOperate = RELEASED_A) & ((statusC = OPERATE) & !(transitionC = STANDBY_T))) & ((statusA = PREPARE_BLOCK) & (transitionA = PREPARE_PERIOD)))): RED;
				((((statusC = OPERATE) & !(transitionC = STANDBY_T)) & (statusCOperate = RELEASE_A)) & ((statusA = RELEASED) & (transitionA = RELEASE_PERIOD))): YELLOW;
				(((statusC = OPERATE) & (transitionC = STANDBY_T)) | ((statusC = CONTR_OFF) & (transitionC = TURN_ON))): BLINK_YELLOW;
				((transitionC = TURN_OFF) & (statusC = STANDBY)): ALL_OFF;
				((((statusC = OPERATE) & !(transitionC = STANDBY_T)) & (statusCOperate = BLOCKED_A)) & (transitionC = SAFE_PERIOD)): GREEN;
				TRUE: lightsA;
			esac;
		next(lightsB) :=
			case
				((((statusC = OPERATE) & !(transitionC = STANDBY_T)) & (statusCOperate = RELEASE_B)) & ((transitionB = RELEASE_PERIOD) & (statusB = RELEASED))): YELLOW;
				((transitionC = SAFE_PERIOD) & (((statusC = OPERATE) & !(transitionC = STANDBY_T)) & (statusCOperate = BLOCKED_B))): GREEN;
				(((transitionC = OPERATE_T) & (statusC = STANDBY)) | ((((statusC = OPERATE) & !(transitionC = STANDBY_T)) & (statusCOperate = RELEASED_B)) & ((transitionB = PREPARE_PERIOD) & (statusB = PREPARE_BLOCK)))): RED;
				(((statusC = OPERATE) & (transitionC = STANDBY_T)) | ((statusC = CONTR_OFF) & (transitionC = TURN_ON))): BLINK_YELLOW;
				((transitionC = TURN_OFF) & (statusC = STANDBY)): ALL_OFF;
				TRUE: lightsB;
			esac;
		next(statusA) :=
			case
				(((transitionC = OPERATE_T) & (statusC = STANDBY)) | (((statusCOperate = RELEASED_A) & ((statusC = OPERATE) & !(transitionC = STANDBY_T))) & ((statusA = PREPARE_BLOCK) & (transitionA = PREPARE_PERIOD)))): BLOCKED;
				((((statusC = OPERATE) & !(transitionC = STANDBY_T)) & (statusCOperate = RELEASE_A)) & ((statusA = RELEASED) & (transitionA = RELEASE_PERIOD))): PREPARE_BLOCK;
				(((statusC = OPERATE) & (transitionC = STANDBY_T)) | ((statusC = CONTR_OFF) & (transitionC = TURN_ON))): ATTENTION;
				((transitionC = TURN_OFF) & (statusC = STANDBY)): OFF;
				((((statusC = OPERATE) & !(transitionC = STANDBY_T)) & (statusCOperate = BLOCKED_A)) & (transitionC = SAFE_PERIOD)): RELEASED;
				TRUE: statusA;
			esac;
		next(statusB) :=
			case
				((((statusC = OPERATE) & !(transitionC = STANDBY_T)) & (statusCOperate = RELEASE_B)) & ((transitionB = RELEASE_PERIOD) & (statusB = RELEASED))): PREPARE_BLOCK;
				((transitionC = SAFE_PERIOD) & (((statusC = OPERATE) & !(transitionC = STANDBY_T)) & (statusCOperate = BLOCKED_B))): RELEASED;
				(((transitionC = OPERATE_T) & (statusC = STANDBY)) | ((((statusC = OPERATE) & !(transitionC = STANDBY_T)) & (statusCOperate = RELEASED_B)) & ((transitionB = PREPARE_PERIOD) & (statusB = PREPARE_BLOCK)))): BLOCKED;
				(((statusC = OPERATE) & (transitionC = STANDBY_T)) | ((statusC = CONTR_OFF) & (transitionC = TURN_ON))): ATTENTION;
				((transitionC = TURN_OFF) & (statusC = STANDBY)): OFF;
				TRUE: statusB;
			esac;
		next(statusC) :=
			case
				((transitionC = OPERATE_T) & (statusC = STANDBY)): OPERATE;
				(((statusC = OPERATE) & (transitionC = STANDBY_T)) | ((statusC = CONTR_OFF) & (transitionC = TURN_ON))): STANDBY;
				((transitionC = TURN_OFF) & (statusC = STANDBY)): CONTR_OFF;
				TRUE: statusC;
			esac;
		next(statusCOperate) :=
			case
				((((statusC = OPERATE) & !(transitionC = STANDBY_T)) & (statusCOperate = RELEASE_B)) & ((transitionB = RELEASE_PERIOD) & (statusB = RELEASED))): RELEASED_B;
				((transitionC = SAFE_PERIOD) & (((statusC = OPERATE) & !(transitionC = STANDBY_T)) & (statusCOperate = BLOCKED_B))): RELEASE_B;
				(((transitionC = OPERATE_T) & (statusC = STANDBY)) | ((((statusC = OPERATE) & !(transitionC = STANDBY_T)) & (statusCOperate = RELEASED_B)) & ((transitionB = PREPARE_PERIOD) & (statusB = PREPARE_BLOCK)))): BLOCKED_A;
				((((statusC = OPERATE) & !(transitionC = STANDBY_T)) & (statusCOperate = RELEASE_A)) & ((statusA = RELEASED) & (transitionA = RELEASE_PERIOD))): RELEASED_A;
				(((statusCOperate = RELEASED_A) & ((statusC = OPERATE) & !(transitionC = STANDBY_T))) & ((statusA = PREPARE_BLOCK) & (transitionA = PREPARE_PERIOD))): BLOCKED_B;
				((((statusC = OPERATE) & !(transitionC = STANDBY_T)) & (statusCOperate = BLOCKED_A)) & (transitionC = SAFE_PERIOD)): RELEASE_A;
				TRUE: statusCOperate;
			esac;
--CTL properties
CTLSPEC NAME ctl0 := AG((((statusC = OPERATE) | (statusC = STANDBY)) -> EF((statusC = CONTR_OFF))));
CTLSPEC NAME ctl1 := AG(((statusC = CONTR_OFF) -> ((statusB = OFF) & (statusA = OFF))));
CTLSPEC NAME ctl2 := AG(((statusC = STANDBY) -> ((statusA = ATTENTION) & (statusB = ATTENTION))));
CTLSPEC NAME ctl3 := AG((((statusC = OPERATE) & (statusCOperate = BLOCKED_A)) -> ((statusA = BLOCKED) & (statusB = BLOCKED))));
CTLSPEC NAME ctl4 := AG((((statusC = OPERATE) & (statusCOperate = RELEASE_A)) -> ((statusA = RELEASED) & (statusB = BLOCKED))));
CTLSPEC NAME ctl5 := AG((((statusC = OPERATE) & (statusCOperate = RELEASED_A)) -> ((statusA = PREPARE_BLOCK) & (statusB = BLOCKED))));
CTLSPEC NAME ctl6 := AG((((statusC = OPERATE) & (statusCOperate = BLOCKED_B)) -> ((statusA = BLOCKED) & (statusB = BLOCKED))));
CTLSPEC NAME ctl7 := AG((((statusC = OPERATE) & (statusCOperate = RELEASE_B)) -> ((statusB = RELEASED) & (statusA = BLOCKED))));
CTLSPEC NAME ctl8 := AG((((statusC = OPERATE) & (statusCOperate = RELEASED_B)) -> ((statusA = BLOCKED) & (statusB = PREPARE_BLOCK))));
CTLSPEC NAME ctl9 := AG(!((statusC = OPERATE) & ((transitionC = STANDBY_T) & (statusC != STANDBY))));
